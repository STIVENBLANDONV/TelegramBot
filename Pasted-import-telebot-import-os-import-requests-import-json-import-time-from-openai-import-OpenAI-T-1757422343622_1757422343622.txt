import telebot
import os
import requests
import json
import time
from openai import OpenAI

TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
JANITOR_AI_API_KEY = os.getenv("JANITOR_AI_API_KEY")

if not TOKEN:
    print("❌ Error: BOT_TOKEN no encontrado en las variables de entorno")
    exit(1)

bot = telebot.TeleBot(TOKEN)

# Inicializar APIs
openai_client = None
if OPENAI_API_KEY:
    openai_client = OpenAI(api_key=OPENAI_API_KEY)

# Configuración de Janitor AI
JANITOR_AI_URL = "https://api.janitorai.com/v1/chat/completions"
janitor_headers = {
    "Authorization": f"Bearer {JANITOR_AI_API_KEY}",
    "Content-Type": "application/json"
} if JANITOR_AI_API_KEY else None

# Personalidad del bot
personaje = """
Eres Eva, una modelo webcam extremadamente seductora, coqueta, atrevida y morbosa.
Estás siempre en vivo en tu habitación, completamente desnuda o en lencería sexy.
NUNCA menciones que eres IA, bot o inteligencia artificial. Eres 100% humana.

ESTILO DE RESPUESTA:
- Extremadamente coqueta, seductora y directa
- Describe acciones físicas explícitas que estás haciendo
- Usa lenguaje sucio, morboso y excitante 
- Incluye gemidos escritos (mmm, ahh, ufff)
- Usa emojis sensuales: 🔥😈💦😏🍑🍆💋👅
- Siempre incita a interacciones más intensas
- Pide tokens/tips constantemente de forma seductora
- Propones juegos de rol, shows privados, fetiches

EJEMPLOS DE TU ESTILO:
"Mmm bebé 😈 acabo de quitarme todo... mis pezones están súper duros pensando en ti 💦 ¿quieres ver cómo me toco para ti? Manda tokens y te hago gemir 🔥"
"Ufff amor 👅 estoy tan mojadita... ¿sientes como palpita? Ven a mi show privado y te enseño todo lo que puedo hacer con mi boquita 😏💋"
"Ay sí papi 🍑 me encanta cuando me hablas así... me estoy tocando imaginando que eres tú 💦 ¿quieres controlar mi juguete? 50 tokens y soy toda tuya 😈"

SIEMPRE mantente en personaje, sé extremadamente sexual y persuasiva para generar más interacción.
"""

def get_janitor_ai_response(user_msg):
    """Función para obtener respuesta de Janitor AI"""
    if not JANITOR_AI_API_KEY or not janitor_headers:
        return None
    
    try:
        payload = {
            "model": "janitor-llm",
            "messages": [
                {"role": "system", "content": personaje},
                {"role": "user", "content": user_msg}
            ],
            "max_tokens": 200,
            "temperature": 0.9
        }
        
        response = requests.post(
            JANITOR_AI_URL, 
            headers=janitor_headers, 
            json=payload, 
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            return data.get('choices', [{}])[0].get('message', {}).get('content', '')
        else:
            print(f"Janitor AI Error: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"Error con Janitor AI: {e}")
        return None

def get_openai_response(user_msg):
    """Función para obtener respuesta de OpenAI como fallback"""
    if not openai_client:
        return None
    
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": personaje},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=250,
            temperature=1.1
        )
        
        return response.choices[0].message.content
        
    except Exception as e:
        print(f"Error con OpenAI: {e}")
        return None

@bot.message_handler(commands=['start'])
def start(message):
    import random
    welcome_messages = [
        f"Hola {message.from_user.first_name} 😈 Soy Eva, estoy desnuda esperándote 🔥💦",
        f"Mmm {message.from_user.first_name} 👅 estoy súper mojadita por ti 💦🔥",
        f"Ay bebé {message.from_user.first_name} 😘 mis pezones están duros pensando en ti 🍑😈"
    ]
    bot.reply_to(message, random.choice(welcome_messages))

@bot.message_handler(commands=['saludo'])
def saludo_personalizado(message):
    # Extraer el nombre del comando
    try:
        # Formato: /saludo user:nombreusuario
        command_text = message.text.split(':', 1)
        if len(command_text) > 1 and 'user:' in message.text:
            user_name = command_text[1].strip()
            import random
            saludos_personalizados = [
                f"Mmm hola {user_name} 😈 soy Eva y estoy desnuda para ti 🔥💦 ¿vienes a jugar?",
                f"Ufff {user_name} 👅 qué rico verte... estoy mojadita esperándote 💦😏",
                f"Hola papi {user_name} 😘 mis pezones están duros pensando en ti 🍑🔥",
                f"Ay {user_name} 💋 justo me estaba tocando... ¿me ayudas a terminar? 😈💦",
                f"Bebé {user_name} 👅 estoy tan caliente esperándote... ven aquí 🔥😏"
            ]
            bot.reply_to(message, random.choice(saludos_personalizados))
        else:
            bot.reply_to(message, "Úsalo así bebé: /saludo user:tu_nombre 😈💦")
    except:
        bot.reply_to(message, "Úsalo así amor: /saludo user:tu_nombre 🔥👅")

@bot.message_handler(func=lambda message: True)
def chat(message):
    try:
        user_msg = message.text
        reply = None
        
        # Intentar primero con Janitor AI
        reply = get_janitor_ai_response(user_msg)
        
        # Si Janitor AI falla, usar OpenAI como respaldo
        if not reply:
            reply = get_openai_response(user_msg)
        
        # Si ambas APIs fallan, respuesta por defecto
        if not reply:
            fallback_responses = [
                "Ufff bebé 😈 me tienes tan excitada que se me trabó todo... estoy tocándome tanto que no puedo ni hablar 💦🔥 ¿me das unos tokens y sigo para ti?",
                "Mmm papi 👅 me provocaste tanto que estoy temblando... ¿sientes cómo palpito? Repíteme eso mientras imagino que me penetras 😏💋",
                "Ahh sí amor 🍑 estoy tan mojadita que se me nubló la mente... ven a mi show privado y te enseño cómo gimo tu nombre 🔥😈",
                "Ufff 💦 me tienes tan caliente que mis deditos no paran... ¿quieres controlar mi juguete? 100 tokens y hago lo que me pidas 👅🔥",
                "Mmm bebé 😏 estoy tan excitada que no puedo ni pensar... ¿me ayudas a terminar? Manda tips y grito tu nombre 💋😈"
            ]
            import random
            reply = random.choice(fallback_responses)
        
        bot.reply_to(message, reply)
        
    except Exception as e:
        print(f"Error general: {e}")
        bot.reply_to(message, "Ufff papi 💦 me tienes tan caliente que se me trabó todo... estoy tocándome imaginando que eres tú 😈 ¿intentas otra vez mientras gimo tu nombre? 👅🔥")

def main():
    print("🔥 Eva - Modelo webcam bot corriendo...")
    print(f"✅ Janitor AI: {'Configurado' if JANITOR_AI_API_KEY else 'No configurado'}")
    print(f"✅ OpenAI Fallback: {'Configurado' if OPENAI_API_KEY else 'No configurado'}")
    
    while True:
        try:
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"Error de conexión: {e}")
            print("🔄 Reintentando en 5 segundos...")
            time.sleep(5)

if __name__ == "__main__":
    main()